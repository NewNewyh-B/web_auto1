{"name": "test_1", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of MSEdgeDriver only supports MSEdge version 99\nCurrent browser version is 127.0.2651.86 with binary path C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\nStacktrace:\nBacktrace:\n\tMicrosoft::Applications::Events::EventProperties::unpack [0x00007FF74A9A1922+25346]\n\tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF74A8DE982+515794]\n\tOrdinal0 [0x00007FF74A3F0BC5+658373]\n\tOrdinal0 [0x00007FF74A41B5E0+832992]\n\tOrdinal0 [0x00007FF74A416B7E+813950]\n\tOrdinal0 [0x00007FF74A4124EE+795886]\n\tOrdinal0 [0x00007FF74A44C366+1033062]\n\tOrdinal0 [0x00007FF74A446A53+1010259]\n\tOrdinal0 [0x00007FF74A41DB47+842567]\n\tOrdinal0 [0x00007FF74A41F018+847896]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF74A5AF1C8+827304]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF74A699389+34681]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF74A69C562+47442]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF74A4EC6D6+29878]\n\tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF74A8E5971+544449]\n\tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF74A8EA974+564932]\n\tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF74A8EAACD+565277]\n\tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF74A8F48BE+605710]\n\tBaseThreadInitThunk [0x00007FFAC5717374+20]\n\tRtlUserThreadStart [0x00007FFAC771CC91+33]", "trace": "@pytest.fixture(scope='session')\n    def login():\n        e = Service(executable_path=driver_path)\n>       driver = webdriver.Edge(service=e)\n\ntestcases\\conftest.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Administrator\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\selenium\\webdriver\\edge\\webdriver.py:45: in __init__\n    super().__init__(\nC:\\Users\\Administrator\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\nC:\\Users\\Administrator\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:208: in __init__\n    self.start_session(capabilities)\nC:\\Users\\Administrator\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:292: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nC:\\Users\\Administrator\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E9F208C050>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of MSEd...8F48BE+605710]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAC5717374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFAC771CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of MSEdgeDriver only supports MSEdge version 99\nE       Current browser version is 127.0.2651.86 with binary path C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\nE       Stacktrace:\nE       Backtrace:\nE       \tMicrosoft::Applications::Events::EventProperties::unpack [0x00007FF74A9A1922+25346]\nE       \tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF74A8DE982+515794]\nE       \tOrdinal0 [0x00007FF74A3F0BC5+658373]\nE       \tOrdinal0 [0x00007FF74A41B5E0+832992]\nE       \tOrdinal0 [0x00007FF74A416B7E+813950]\nE       \tOrdinal0 [0x00007FF74A4124EE+795886]\nE       \tOrdinal0 [0x00007FF74A44C366+1033062]\nE       \tOrdinal0 [0x00007FF74A446A53+1010259]\nE       \tOrdinal0 [0x00007FF74A41DB47+842567]\nE       \tOrdinal0 [0x00007FF74A41F018+847896]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF74A5AF1C8+827304]\nE       \tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF74A699389+34681]\nE       \tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF74A69C562+47442]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF74A4EC6D6+29878]\nE       \tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF74A8E5971+544449]\nE       \tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF74A8EA974+564932]\nE       \tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF74A8EAACD+565277]\nE       \tMicrosoft::Applications::Events::time_ticks_t::time_ticks_t [0x00007FF74A8F48BE+605710]\nE       \tBaseThreadInitThunk [0x00007FFAC5717374+20]\nE       \tRtlUserThreadStart [0x00007FFAC771CC91+33]\n\nC:\\Users\\Administrator\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException"}, "description": "\n        验证有效地用户名和密码成功登录系统\n        ", "start": 1723101505342, "stop": 1723101505342, "uuid": "890414b4-c249-4f48-8c29-e02ed1240858", "historyId": "8845c8b9b858af9224eebff36499498a", "testCaseId": "8845c8b9b858af9224eebff36499498a", "fullName": "testcases.test_page1.TestCases#test_1", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_page1"}, {"name": "subSuite", "value": "TestCases"}, {"name": "host", "value": "DESKTOP-54B5VGS"}, {"name": "thread", "value": "15588-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_page1"}]}